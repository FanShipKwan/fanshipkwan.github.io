{"meta":{"title":"因缺斯汀","subtitle":"一个怪石的呓语","description":null,"author":"善能菌","url":"http://yoursite.com"},"pages":[{"title":"","date":"2016-05-22T16:12:47.040Z","updated":"2016-05-22T16:12:47.040Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null}],"posts":[{"title":"PANDAS常用手册 II -- 使用 HTML 和 Web API","slug":"PANDAS常用手册-II-使用-HTML-和-Web-API","date":"2016-05-18T15:40:15.569Z","updated":"2016-05-23T12:45:50.327Z","comments":true,"path":"2016/05/18/PANDAS常用手册-II-使用-HTML-和-Web-API/","link":"","permalink":"http://yoursite.com/2016/05/18/PANDAS常用手册-II-使用-HTML-和-Web-API/","excerpt":"tags： [ PYTHON科学计算 ] 一、实验简介 今天的课程比较简单，主要是对上一节课的一些补充。许多网站都有一些通过 JSON 或其他格式提供数据的公共 API。通过 Python 访问这些 API 的办法不少。一个简单易用的办法是 request 包。","keywords":null,"text":"tags： [ PYTHON科学计算 ] 一、实验简介 今天的课程比较简单，主要是对上一节课的一些补充。许多网站都有一些通过 JSON 或其他格式提供数据的公共 API。通过 Python 访问这些 API 的办法不少。一个简单易用的办法是 request 包。 二、使用 HTML 和 Web API GeoNames是一个免费的全球地理数据库。我们可以发送一个 HTTP GET 请求（关于Web API的数据下载，需要在联网情况才能进行。成功购买实验楼会员服务的用户，便可直接在环境中链接外网），如下所示：12345678In [15]: import requestsIn [16]: url = 'http://api.geonames.org/citiesJSON?north=44.1&amp;south=-9.9&amp;east=-22.4&amp;west=55.2&amp;lang=de&amp;username=demo'In [17]: resp = requests.get(url)In [18]: respOut[18]: &lt;Response [200]&gt; Response 对象的 text 属性含有 GET 请求的内容。许多 Web API 返回的都是 JSON 字符串，我们必须将其加载到一个 Python 对象中123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146In [19]: import jsonIn [20]: data = json.loads(resp.text)In [21]: data.keys()Out[21]: [u'geonames']In [22]: dataOut[22]: &#123;u'geonames': [&#123;u'countrycode': u'MX', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 3530597, u'lat': 19.428472427036, u'lng': -99.12766456604, u'name': u'Mexiko-Stadt', u'population': 12294193, u'toponymName': u'Mexico City', u'wikipedia': u'en.wikipedia.org/wiki/Mexico_City'&#125;, &#123;u'countrycode': u'CN', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1816670, u'lat': 39.9074977414405, u'lng': 116.397228240967, u'name': u'Peking', u'population': 11716620, u'toponymName': u'Beijing', u'wikipedia': u'en.wikipedia.org/wiki/Beijing'&#125;, &#123;u'countrycode': u'PH', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1701668, u'lat': 14.6042, u'lng': 120.9822, u'name': u'Manila', u'population': 10444527, u'toponymName': u'Manila', u'wikipedia': u'en.wikipedia.org/wiki/Manila'&#125;, &#123;u'countrycode': u'BD', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1185241, u'lat': 23.710395616597037, u'lng': 90.40743827819824, u'name': u'Dhaka', u'population': 10356500, u'toponymName': u'Dhaka', u'wikipedia': u'en.wikipedia.org/wiki/Dhaka'&#125;, &#123;u'countrycode': u'KR', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1835848, u'lat': 37.566, u'lng': 126.9784, u'name': u'Seoul', u'population': 10349312, u'toponymName': u'Seoul', u'wikipedia': u'en.wikipedia.org/wiki/Seoul'&#125;, &#123;u'countrycode': u'ID', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1642911, u'lat': -6.214623197035775, u'lng': 106.84513092041016, u'name': u'Jakarta', u'population': 8540121, u'toponymName': u'Jakarta', u'wikipedia': u'en.wikipedia.org/wiki/Jakarta'&#125;, &#123;u'countrycode': u'JP', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1850147, u'lat': 35.6895, u'lng': 139.69171, u'name': u'Tokio', u'population': 8336599, u'toponymName': u'Tokyo', u'wikipedia': u'de.wikipedia.org/wiki/Tokyo'&#125;, &#123;u'countrycode': u'TW', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1668341, u'lat': 25.047763, u'lng': 121.531846, u'name': u'Taipeh', u'population': 7871900, u'toponymName': u'Taipei', u'wikipedia': u'de.wikipedia.org/wiki/Taipei'&#125;, &#123;u'countrycode': u'CO', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 3688689, u'lat': 4.609705849789108, u'lng': -74.08175468444824, u'name': u'Bogot\\xe1', u'population': 7674366, u'toponymName': u'Bogot\\xe1', u'wikipedia': u'en.wikipedia.org/wiki/Bogot%C3%A1'&#125;, &#123;u'countrycode': u'HK', u'fcl': u'P', u'fclName': u'city, village,...', u'fcode': u'PPLC', u'fcodeName': u'capital of a political entity', u'geonameId': 1819729, u'lat': 22.2855225817732, u'lng': 114.157691001892, u'name': u'Hong Kong', u'population': 7012738, u'toponymName': u'Hong Kong', u'wikipedia': u'en.wikipedia.org/wiki/Hong_Kong'&#125;]&#125;In [23]: city_fields = ['countrycode','name','fcode','population']In [24]: citys = DataFrame(data['geonames'],columns=city_fields)In [25]: citysOut[25]: countrycode name fcode population0 MX Mexiko-Stadt PPLC 122941931 CN Peking PPLC 117166202 PH Manila PPLC 104445273 BD Dhaka PPLC 103565004 KR Seoul PPLC 103493125 ID Jakarta PPLC 85401216 JP Tokio PPLC 83365997 TW Taipeh PPLC 78719008 CO Bogotá PPLC 76743669 HK Hong Kong PPLC 7012738 现在，DataFrame 中的每一行就有了来自 GeoNames 的数据：1234567In [26]: citys.ix[5]Out[26]: countrycode IDname Jakartafcode PPLCpopulation 8540121Name: 5, dtype: object 要想能够直接得到便于分析的 DataFrame 对象，只需要再多费些精力创建出对常见 Web API 的更高级接口即可。","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2016-04-12T11:46:46.162Z","updated":"2016-04-12T11:46:46.162Z","comments":true,"path":"2016/04/12/hello-world/","link":"","permalink":"http://yoursite.com/2016/04/12/hello-world/","excerpt":"","keywords":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[],"tags":[]}]}